@startuml Metastore
namespace Controller {
    class MetastoreController {
        +getItem($identifier)
        +getItems(): **MetastoreItemInterface[]**
        +getCatalog()
        +getSchema($schemaId)
        +getSchemas()
        +postItem()
        +patchItem()
        +putItem()
        +deleteItem($schemaId)
        +publishItem($schemaId)
    }
}

package "(root services)" <<Rectangle>> {
    class SchemaRetriever {
        ""dkan.metastore.schema_retriever""
        +get($schemaId)
        +getAll()
        +getAllIds()
    }

    class MetadataRetriever {
        ""dkan.metastore.metadata_retriever""
        +getAllIds(): **string[]**
        +get(string $schemaId, string $identifier[...]): **MetastoreItemInterface**
        +getAll(string $schemaId[...]): **MetastoreItemInterface[]**
        +catalog()
    }

    class MetadataWriter {
        ""dkan.metastore.metadata_writer""
        +create($data)
        +merge(string $identifier, $data)
        +replace(string $identifier, $data)
        +delete(string $identifier)
        +publish(string $identifier)
    }
}

namespace Storage {
    interface MetastoreItemStorageFactoryInterface {
        +getInstance(string $schemaId): **MetastoreItemStorageInterface**
    }

    class ItemNodeStorageFactory implements MetastoreItemStorageFactoryInterface {
        ""dkan.metastore.storage""
        +getInstance(string $schemaId): **ItemNodeStorage**
    }

    interface MetastoreItemStorageInterface {
        #$schemaId
        +query(): **Drupal::entityQuery**
        +getSchemaId(): string
        +load(string $identifier): **MetastoreItemInterface**
        +loadByHash(string $hash)
        +identifiers(): string[]
        +loadContains($string): **MetastoreItemNode**[]
        +loadMultiple(): **MetastoreItemNode**[]
        +delete($identifier)
        +createItem(string $metadata): **MetastoreItemInterface**
        +count(): int
    }

    class ItemNodeStorage implements MetastoreItemStorageInterface {
        +__construct($schemaId)
        #$entityTypeId
        #$bundle
        #$metadataField
        #$schemaIdField
        #$metadataHashField
        +load(string $identifier): **ItemNode**
        +query(): **Drupal::entityQuery**
        +loadMultiple(): **ItemNode**[]
        ---
        {inherited}
    }

    note as StorageNote
        A storage object is specific to a schema
        (e.g. "dataset"). It is instantiated with
        ""dkan.metastore.storage"".
    end note
    ' ItemNodeStorageFactory --> StorageNote
    StorageNote --> ItemNodeStorage
    ItemNodeStorageFactory --> ItemNodeStorage : Storage factory creates \n storage object
}
namespace MetastoreItem {
    interface MetastoreItemInterface {
        #$referenced **RootedJsonData**
        #$dereferenced **RootedJsonData**
        +__to_string()
        +identifier()
        +schemaId()
        +modified()
        +getReferenced(): **RootedJsonData**
        +getDereferenced(): **RootedJsonData**
        +setMetadata($data): **bool**
        +replace($json)
        +merge($json)
    }
    note left of MetastoreItemInterface::__to_string
        wrapper for
        <code>
        $this->getDereferenced()
          ->__to_string();
    end note

    class ItemNode implements MetastoreItemInterface {
        #$node
        ---
        {inherited}
    }

    interface MetastoreItemFactoryInterface {
        {static} +wrap(**Drupal\core\Entity** $entity): **MetastoreItemInterface**
    }

    class ItemNodeFactory implements MetastoreItemFactoryInterface {
        ""dkan.metastore.item_factory""
        {static} +wrap(**Drupal\\node\Node** $node): **ItemNode**
    }

    note bottom
        Used in contexts where we have an entity object but don't know
        the schemaId. For instance, in an entity update or insert hook:

        <code>
        function hook_entity_update($entity) {
          $metastoreItem = \Drupal::service('dkan.metastore.item_factory')
            ->wrap($entity);
          $schemaId = $metastoreItem->schemaId();
        }
        </code>
    end note
}

MetastoreItem.ItemNode <-- Storage.ItemNodeStorage : Storage object loads \n& returns item objects

Controller.MetastoreController --> SchemaRetriever

note as RetrieverNote
    MetadataRetriever methods pass objects that can be cast to
    strings back to the controller. For ""getItem()"" this could look like:

    <code>
    /* @var string $identifier */
    $dataset = \Drupal::service('dkan.metastore.storage')
      ->getInstance('dataset')
      ->load($identifier);
    return $this->apiResponse->cachedJsonResponse($dataset);
    </code>

    If we passed the ""show-reference-ids"" argument:

    <code>
    return $this->apiResponse
        ->cachedJsonResponse($dataset->getReferenced());
end note
MetadataRetriever *-- RetrieverNote
RetrieverNote --> Controller.MetastoreController

note as RetrieverServiceNote
    Controller get methods call 
    ""dkan.metastore.metadata_retriever""
end note
Controller.MetastoreController *-- RetrieverServiceNote
RetrieverServiceNote --> MetadataRetriever

note as RetrieverStorageNote
    MertadataRetriever methods will instantiate a storage object and
    use it to retrieve one or several //items//. For a ""get()"", this
    could look like:
    
    <code>
    /* @var string $identifier */
    return \Drupal::service('dkan.metastore.storage')
      ->getInstance('dataset')
      ->load($identifier);
    </code>
end note
MetadataRetriever *-- RetrieverStorageNote
RetrieverStorageNote -->Storage.MetastoreItemStorageFactoryInterface

note as WriterServiceNote
    Controller writer (patch, put etc) methods 
    call ""dkan.metastore.metadata_retriever""
end note
Controller.MetastoreController *-- WriterServiceNote
WriterServiceNote --> MetadataWriter


note as WriterNote
    MetadataWriter post/patch/put methods load single
    MetastoreItem objects and call //their// methods directly. 
    For a ""replace()"", this could look like:

    <code>
    /* @var string $identifier */
    /* @var RootedJsonData $newMetadata */
    $dataset = \Drupal::service('dkan.metastore.storage')
      ->getInstance('dataset')
      ->load($identifier);
    return $dataset->setMetadata($newMetadata);
    </code>
end note
MetadataWriter *-- WriterNote
WriterNote --> MetastoreItem.MetastoreItemInterface

WriterNote -[hidden]> RetrieverStorageNote
RetrieverNote -[hidden]> Controller
@enduml